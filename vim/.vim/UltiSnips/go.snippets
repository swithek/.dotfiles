# modify error by adding context.
snippet merr "modify error by adding context"
fmt.Errorf("${1:info}: %w", ${2:${VISUAL:err}})
endsnippet

# modify error by adding context and return it.
snippet rmerr "modify error by adding context and return it."
return fmt.Errorf("${1:info}: %w", ${2:${VISUAL:err}})
endsnippet

# test function with map-type table.
snippet testcc "test with case table"
func Test${1:Function}(t *testing.T) {
	cc := map[string]struct{
		Result ${2:string}
	}{
		"Successful ${3:execution}": {
			Result: ${4:"result"},
		},
	}

	for cn, c := range cc {
		t.Run(cn, func(t *testing.T) {
			${0}
		})
	}
}
endsnippet

# test function with map-type table, executing sub tests in parallel.
snippet testccp "test with case table, executing sub tests in parallel"
func Test${1:Function}(t *testing.T) {
	cc := map[string]struct{
		Result ${2:string}
	}{
		"Successful ${3:execution}": {
			Result: ${4:"result"},
		},
	}

	for cn, c := range cc {
		c := c
		t.Run(cn, func(t *testing.T) {
			t.Parallel()

			${0}
		})
	}
}
endsnippet

# map-type test table.
snippet cc "test case table"
cc := map[string]struct{
	Result ${1:string}
}{
	"Successful ${2:execution}": {
		Result: ${3:"result"},
	},
}

for cn, c := range cc {
	t.Run(cn, func(t *testing.T) {
		${0}
	})
}
endsnippet

# map-type test table, executing sub tests in parallel.
snippet ccp "test case table, executing sub tests in parallel"
cc := map[string]struct{
	Result ${1:string}
}{
	"Successful ${2:execution}": {
		Result: ${3:"result"},
	},
}

for cn, c := range cc {
	c := c
	t.Run(cn, func(t *testing.T) {
		t.Parallel()

		${0}
	})
}
endsnippet

# test function with map-type table containing error field.
snippet testcce "test with case table containing error field"
func Test${1:Function}(t *testing.T) {
	cc := map[string]struct{
		Result ${2:string}
		Err error
	}{
		"${5:Invalid data}": {
			Result: ${6:""},
			Err: ${7:errors.New("error")},
		},
		"Successful ${3:execution}": {
			Result: ${4:"result"},
		},
	}

	for cn, c := range cc {
		t.Run(cn, func(t *testing.T) {
			${0}
		})
	}
}
endsnippet

# test function with map-type table containing error field and executing
# sub tests in parallel.
snippet testccep "test with case table containing error field"
func Test${1:Function}(t *testing.T) {
	cc := map[string]struct{
		Result ${2:string}
		Err error
	}{
		"${5:Invalid data}": {
			Result: ${6:""},
			Err: ${7:errors.New("error")},
		},
		"Successful ${3:execution}": {
			Result: ${4:"result"},
		},
	}

	for cn, c := range cc {
		c := c
		t.Run(cn, func(t *testing.T) {
			t.Parallel()

			${0}
		})
	}
}
endsnippet

# map-type test table containing error field.
snippet cce "test case table containing error field"
cc := map[string]struct{
	Result ${1:string}
	Err error
}{
	"${4:Invalid data}": {
		Result: ${5:""},
		Err: ${6:errors.New("error")},
	},
	"Successful ${2:execution}": {
		Result: ${3:"result"},
	},
}

for cn, c := range cc {
	t.Run(cn, func(t *testing.T) {
		${0}
	})
}
endsnippet

# map-type test table containing error field and executing
# sub tests in parallel.
snippet ccep "test case table containing error field and executing sub tests in parallel"
cc := map[string]struct{
	Result ${1:string}
	Err error
}{
	"${4:Invalid data}": {
		Result: ${5:""},
		Err: ${6:errors.New("error")},
	},
	"Successful ${2:execution}": {
		Result: ${3:"result"},
	},
}

for cn, c := range cc {
	c := c
	t.Run(cn, func(t *testing.T) {
		t.Parallel()

		${0}
	})
}
endsnippet
